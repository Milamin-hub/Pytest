import test46, os
name_1 = os.name
print(name_1) # posix

# ♦ ореn(<путь к файлу>, <Режим>[, mode=0o777]) — открывает файл 

# • os.O_RDONLY — чтение;
# • os.O_WRONLY — запись;
# • os.O_RDWR— чтение и запись;
# • os.O_APPEND — добавление в конец файла;
# • os.O_CREATE — создать файл, если он не существует 
# • os.O_EXCL — при использовании совместно с os.O_CREATE указывает, что создаваемый
# файл изначально не должен существовать, в противном случае будет сгенерировано
# исключение FileExistsError;
# • os.O_TEMPORARY — при использовании совместно с os.O_CREATE указывает, что создается временный файл, который будет автоматически удален сразу после закрытия;
# • os.O_SHORTLIVED — то же самое, что os.O_TEMPORARY, но созданный файл по возможности будет храниться лишь в оперативной памяти, а не на диске;
# • os.O_TRUNC — очистить содержимое файла;
# • os.O_BINARY — файл будет открыт в бинарном режиме;
# • os.O_TEXT — файл будет открыт в текстовом режиме 

# Права доступа к файлу определяются записью типа:
"""
-rw-r— г— Г
Первый символ (-) означает, что это файл, и не задает никаких прав доступа. Далее три
символа (rw-) задают права доступа для владельца: чтение и запись, символ (-) здесь означает, что права на выполнение нет. Следующие три символа задают права доступа для группы
(г—) — здесь только чтение. Ну и последние три символа (г—) задают права для всех
остальных пользователей — также только чтение.
Права доступа к каталогу определяются такой строкой:
drwxr-xr-x
Первая буква (d) означает, что это каталог. Владелец может выполнять в каталоге любые
действия (rwx), а группа и все остальные пользователи — только читать и выполнять поиск
(г-х). Для того чтобы каталог можно было просматривать, должны быть установлены права
на выполнение (х).
"""

# ♦ os.f_ok — проверка наличия пути или файла:

o_path = os.access(r"test51.py", os.F_OK)
print(o_path) # True or False

# ♦ os.R_ok — проверка на возможность чтения файла или каталога;
# ♦ os.W_ок — проверка на возможность записи в файл или каталог;
# ♦ os.X_ок — определение, является ли файл или каталог выполняемым

# chmod(<nyTb>, справа доступа>) - чтобы изменить права доступа из программы 

# ♦ сору (скопируемый файл>, <Куда копируем>) — позволяет скопировать файл вместе с правами доступа

# ♦ move(<nyть к файлу>, <куда перемещаем>) — перемещает файл в указанное место с удалением исходного файла.

# ♦ rename(<Старое имя>, <Новое имя>) — переименовывает файл

# ♦ remove(<Путь к файлу>) и unlink(<Путь к файлу>) — позволяют удалить файл. Если файл не удалось удалить, возбуждается исключение osError

# ♦ exists(<путь или дескриптор>) — проверяет указанный путь на существование

# ♦ getsize(<Путь к файлу>) — возвращает размер файла в байтах

# ♦ getatime(<путь к файлу>) — возвращает время последнего доступа к файлу в виде количества секунд, прошедших с начала эпохи

# ♦ getctime(<путь к файлу>) — возвращает дату создания файла в виде количества секунд, прошедших с начала эпохи

# ♦ basename(<Путь>) — возвращает имя файла без пути к нему:
# ♦ dirname(<путь>) — возвращает путь к каталогу, где хранится файл:
# ♦ split(<путь>) — возвращает кортеж из двух элементов: пути к каталогу, где хранится файл, и имени файла:
# ♦ splitdrive(<путь>) — разделяет путь на имя диска и остальную часть пути
# ♦ join(<пути>[, . . <nyть>]) — соединяет указанные элементы пути, при необходимости вставляя между ними разделители:

with os. scandir () as it:
    for entry in it:
        print(entry.name, end=" ")
print()