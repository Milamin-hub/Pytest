# ♦ Декораторы позволяют изменить поведение обычных функций — например, выполнить
# какие-либо действия перед выполнением функции

def deco_1(f): # Функция-декоратор
    print ("Вызвана функция func_1()")
    return f # Возвращаем ссыпку на функцию
@deco_1
def func_1(х):
    return "х = %s" % х
print(func_1(10))

def deco_2(f):
    print("Вызвана функция func_2()")
    return f
def func_2(x):
    return "х = {0}".format(x)
print(deco_2(func_2)(20))

passw = input("Введите пароль: ")
def test_passw(p):
    def deco(f) :
        if p == "10": # Сравниваем пароли
            return f
        else:
            return lambda: "Доступ закрыт"
    return deco # Возвращает функцию - декоратор
@test_passw(passw)
def func():
    return "Доступ открыт"
print(func()) # Вызываем функцию

# Рекурсия — это возможность функции вызывать саму себя

# Вычисление факториала

def factorial(n):
    if n == 0 or n == 1: return 1
    else:
        return n * factorial(n - 1)
while True:
    x = input("Введите число: ")
    if x.isdigit(): # Если строка содержит только цифры
        х = int(x) # Преобразуем строку в число
        break # Выходим из цикла
    else:
        print("Вы ввели не число!")
print("Факториал числа {0} = {1}".format(х, factorial(х)))

# Глобальные переменные — это переменные, объявленные в программе вне функции.
# В Python глобальные переменные видны в любой части модуля

# Локальные переменные — это переменные, объявляемые внутри функций.
# Локальные переменные видны только внутри тела функции.

def func( ):
    locall = 77 # Локальная переменная
    globl = 25 # Локальная переменная
    print("Значение globl внутри функции = ", globl)
    print("Значение locall внутри функции = ", locall)
globl = 10 # Глобальная переменная
func() # Вызываем функцию
print("Значение globl вне функции = " , globl)
try:
    print(locall) # Вызовет исключение NameError
except NameError: # Обрабатываем исключение
    print("Переменная locall не видна вне функции")