import test46

# ♦ Итераторы — это классы, генерирующие последовательности каких-либо значений. 

class Reversestring:
    def __init__(self, s):
        self.__s = s
    def __iter__(self):
        self.__i = 0
        return self
    def __next__(self):
        if self.__i > len(self.__s) - 1:
            raise StopIteration
        else:
            a = self.__s[-self.__i - 1]
            self.__i = self.__i + 1
        return a

s = Reversestring("Milamin")
for a in s: print (a, end="")
print()

# ♦ Контейнеры — классы, которые могут выступать как последовательности (списки или кортежи)

# ♦ Перечисления — особые классы, представляющие наборы каких-либо именованных величин.

# ♦ r — только чтение (значение по умолчанию). После открытия файла указатель устанавливается на начало файла. Если файл не существует, возбуждается исключение
# FileNotFoundError;
# ♦ r+ — чтение и запись. После открытия файла указатель устанавливается на начало файла. Если файл не существует, то возбуждается исключение FileNotFoundError;
# ♦ w — запись. Если файл не существует, он будет создан. Если файл существует, он будет
# перезаписан. После открытия файла указатель устанавливается на начало файла;
# ♦ w+ — чтение и запись. Если файл не существует, он будет создан. Если файл существует,
# он будет перезаписан. После открытия файла указатель устанавливается на начало файла;
# ♦ а — запись. Если файл не существует, он будет создан. Запись осуществляется в конец
# файла. Содержимое файла не удаляется;
# ♦ а+ — чтение и запись. Если файл не существует, он будет создан. Запись осуществляется
# в конец файла. Содержимое файла не удаляется;
# ♦ х — создание файла для записи. Если файл уже существует, возбуждается исключение
# FileExistsError;
# ♦ х+ — создание файла для чтения и записи. Если файл уже существует, возбуждается исключение FileExistsError.
# После указания режима может следовать модификатор:
# ♦ b — файл будет открыт в бинарном режиме. Файловые методы принимают и возвращают объекты типа bytes;
# ♦ t — файл будет открыт в текстовом режиме (значение по умолчанию в Windows). Файловые методы принимают и возвращают объекты типа str.

""" Методы """

# ♦ close () — закрывает файл. Так как интерпретатор автоматически удаляет объект, когда 
# на него отсутствуют ссылки
# ♦ writable () — возвращает True, если файл поддерживает запись, и False — в обратном случае
# ♦ read( [<Количество>]) — считывает данные из файла. Если файл открыт в текстовом 
# режиме, возвращается строка, а если в бинарном — последовательность байтов
# ♦ readline ([<Количество>]) — считывает из файла одну строку при каждом вызове

# ♦ flush() — принудительно записывает данные из буфера на диск

# ♦ truncate( [<количество>]) — обрезает файл до указанного количества символов

# ♦ tell() — возвращает позицию указателя относительно начала файла в виде целого числа.

""" Атрибуты """

# ♦ name — имя файла;
# ♦ node — режим, в котором был открыт файл;
# ♦ closed — возвращает True, если файл был закрыт, и False — в противном случае:
# ♦ encoding— название кодировки, которая будет использоваться для преобразования
# строк перед записью в файл или при чтении. 
# ♦ buffer — позволяет получить доступ к буферу
